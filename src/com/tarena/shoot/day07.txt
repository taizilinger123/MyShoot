Shoot游戏第一天

做项目是学东西最快的时期

24个步骤
第一天：讲16个--------页面上能画出4个对象
第二天：讲4个---------所有对象动起来
第三天：讲4个---------开打

英雄机打掉一个敌机------得5分
英雄机可以发射子弹(单发或者双发)
默认为单发(火力值为0)
英雄机打掉小蜜蜂后得奖励，
奖励分两种：一种是命，一种是火力值

发射一次双倍减2
一次得40火力值--------40 
发了5次-------------40-10=30
得了一次火力----------30+40=70
得了一次火力----------70+40=110
火力值为10000
英雄机死了一次---------0(单倍)

从上往下随机产生敌人(敌机+小蜜蜂)

class FlyingObject{//飞行物
   image,width,height,x,y
}
interface Enemy{//敌机
   int getScore();
}
interface Award{//奖励
   int getType();
}
class Hero extends FlyingObject{//英雄机
}
class Airplane extends FlyingObject implements Enemy{//敌机
}
class Bee extends FlyingObject implements Award{//小蜜蜂
}
class Bullet extends FlyingObject{//子弹
}
class ShootGame{
     public static void main(String[] args){
     }
}

上午共15个
此时完成了9个
还剩下6个步骤：
    前4个步骤---------写4个类的构造方法
    第5个步骤---------画窗口
    第6个步骤---------在窗口画对象
    
在窗口上画对象
1.有窗口-----------完了
2.有对象-----------完了
3.窗口上画对象

Hero hero = new Hero();
Bullet[] bullets = {};
FlyingObject[] flyings = {};//敌人(敌人+小蜜蜂)



int a = (int)(Math.random()*100);//0到99的

Random rand = new Random();
int a = rand.nextInt(2);//0到1的

C/S:客户端/服务器
B/S:浏览器/服务器

swing:
1.JFrame:框架
2.JPanel:面板

frame.setVisible(true);//尽快调用paint()
1.调用了paint()方法
2.自己没有写paint()
3.但是还不报错
4.原因:
   Jpanel父类中有一个paint()方法,什么也没帮你画
         需要重写paint()方法

paint()方法非常特殊:只能由系统来调用


Shoot射击游戏第一天
1.class FlyingObject{
    image,width,height,x,y
}
2.interface Enemy{
    int getScore();
}
3.interface Award{
    DOUBLE_FILE,LIFE
    int getType();
}
4.class Airplane  extends 1 implements 2{
    speed
    Airplane(){}
           重写getScore()
}
5.class Bee extends 1 implements 3{
    xSpeed,ySpeed,awardType
    Bee(){}
           重写getType()
}
6.class Bullet extends 1{
    speed
    Bullet(int x, int y){}
}
7.class Hero extends 1{
     life,doubleFire,images,index
     Hero(){}
}
8.class ShootGame extends JPanel{
     WIDTH,HEIGHT
     
     background,start,pause,gameover
     airplane,bee,bullet,hero0,hero1
     static{}//做4个类的构造方法
     
     main(){
       ...
       frame.setVisible(true);//1.可见 2.尽快调paint()
     }
     
     hero(Hero)
     flyings(FlyingObject[])
     bullets(Bullet[])
     ShootGame(){初始化对象}
     
               重写paint(g){
                     画背景图
       paintHero(g);
       paintFlyingObjects(g);
       paintBullets(g);         
      }
     paintHero(g){}//画英雄机
     paintFlyingObjects(g){}//画敌人
     paintBullets(g){}//画子弹

}


Shoot射击游戏第二天：
1.敌人(敌机+小蜜蜂)入场
2.飞行物(敌机，小蜜蜂，子弹，英雄机)走一步
3.子弹入场
4.英雄机随着鼠标动
5.删除越界的飞行物

50个元素，其中有20个越界了

/** 删除越界的敌人(敌机+小蜜蜂)和子弹 */
public void  outOfBoundsAction(){
  for(int i=0;i<flyings.length;i++){
      FlyingObject f = flyings[i];
      if(f.outOfBounds()){//越界了
                             从flyings数组中删除(缩容)
      }
   } 
}

500000个元素，其中有2000个越界了
更简便的方式------
public void outOfBoundsAction(){
  int index = 0;//不越界的敌人个数
  FlyingObject[] flyingLives = new FlyingObject[flyings.length];
  for(int i=0;i<flyings.length;i++){
    FlyingObject f = flyings[i];
    if(!f.outOfBounds()){//不越界
        flyingLives[index] = f;
        index++;
    }
  }  
  flyings = Arrays.copyOf(flyingLives, index);        
}



java的设计

swing中的事件:
1.事件：发生了一件事
2.事件的处理：发生那个事之后所做的操作 
3.侦听器：

侦听器：
1.先有个侦听器
2.把侦听器添加到面板上

MouseListener  l = new  MouseListener(){
                   重写5个方法
};
MouseMotionListener ll = new MouseMotionListener(){
                  重写2个方法
}; 

MouseAdapter l = new MouseAdapter(){
                  重写鼠标移动事件
                  重写鼠标点击事件
      ---用哪个重写哪个
};
this.addMouseListener(l);
this.addMouseMotionListener(l);



事件                                  事件处理
鼠标点击                     从启动状态变为运行状态
鼠标移动                     英雄机随着动
鼠标移出                    从运行状态变为暂停状态
鼠标移入                    从暂停状态变为运行状态
 

Bullet[] bs = hero.shoot();
bullets = Arrays.copyOf(bullets, bullets.length+bs.length);
System.arraycopy(bs,0,bullets,bullets.length-bs.length,bs.length);

打掉一个得40
发射一次双倍火力减2


子弹入场：
1.创建子弹对象
2.将子弹对象添加到bullets数组中

敌人如何出现的？
------从上面随机产生的

子弹如何出现的？
------由英雄机发射出来的



bullets元素个数为0


paint()调用方式两种：
1.frame.setVisible(true);
2.repaint();


敌人入场：定时发生的
1.创建敌人(敌机+小蜜蜂)对象 
2.将敌人对象添加到flyings数组中

TimerTask       
                   TimerTask tt
timer.schedule(new TimerTask(){
    public void run(){//定时干的那个事
    
    }
},10,10);

class Aoo extends TimerTask{}

第一个10：从程序启动到第一次触发的时间间隔
第二个10：第一次触发到第二次触发的时间间隔
                      第二次触发到第三次触发的时间间隔
                      第三次触发到第四次触发的时间间隔

定个表明天早上7点

定时器Timer 
//生成敌人(敌机+小蜜蜂)对象
public FlyingObject nextOne(){
    return new Airplane();
}

子弹入场：
1.创建子弹对象 
2.将子弹对象添加到bullets数组中

1.敌人入场的实现步骤：
  1)main(){game.action();}
  2)action(){
     ...
     run(){//10毫秒定时执行
       enteredAction();//敌人入场
       repaint();
       }
     }

  3)int index = 0;
    enterAction(){ //10毫秒
        index++;
		if(index%40==0){//40*10毫秒
			FlyingObject one = nextOne();//获取敌人(敌机+小蜜蜂)对象 
			flyings = Arrays.copyOf(flyings, flyings.length+1);//扩容
			flyings[flyings.length-1] = one;//将生成的敌人对象添加到数组的最后一个元素上			
		}
	}
  4)nextOne(){
	     生成0到19的随机数
	     为0时return new Bee();
	     否则return new Airplane();
    }
 2.飞行物走一步的实现步骤：
 1)FlyingObject----抽象方法step();
 2)Airplane,Bee,Bullet,Hero---重写step()
 3)action(){
     run(){
         enterAction();
         stepAction();
         repaint();//重画
         }
    }
 4)stepAction(){
	      遍历所有敌人，调用step()
	      遍历所有子弹，调用step()
	  hero.step();
}
3.子弹入场的实现步骤：
1)Hero---shoot()英雄机发射子弹
2)action(){
    run(){
      ...
      shootAction();//发射子弹
      repaint();
     }
 } 
 3)int shootIndex = 0;
   shootAction(){ //10毫秒走一次
     shootIndex++;
		if(shootIndex%30==0){//300毫秒
			//获取子弹对象，将子弹对象添加到bullets数组中
			调用Hero的shoot()得到发射出的子弹数组bullets
			将bullets扩容(+bs.length)
			将bs追加到bullets数组中--System.arraycopy
		}		
	}
4.英雄机随着鼠标移动的实现步骤
  1)Hero---moveTo(int x,int y)
  2)action(){
     MouseAdapter l = new MouseAdapter(){
                            重写MouseMoved(){
                                       获取鼠标的x和y
             hero.moveTo(x,y);//移动     
       } 
     };
     this.addMouseMotionListener(l);
     this.addMouseListener(l);
     
     run(){
        ... 
     }
   }
5.删除越界的敌人和子弹的实现步骤：
  1)FlyingObject-------abstract outOfBounds();
  2)Airplane,bee,bullet,Hero--重写outOfBounds()
  3)action(){
     run(){
       ...
       outOfBoundsAction();//删除越界的
       repaint();
     }
   }
  4)outOfBoundsAction(){
     1)声明活着的数组
     2)遍历flyings/bullets数组
                     判断对象是否不越界:
                     若true:
                                将对象添加到活着的数组中
     3)将活着的数组复制到flyings/bullets数组中
   } 
 
Shoot射击游戏第三天   
1.子弹与敌人(敌机+小蜜蜂)的碰撞
2.画分和命
3.英雄机与敌人(敌机+小蜜蜂)的碰撞
4.画状态

启动，运行，暂停，游戏结束


若撞上了：
1)英雄机减命，英雄机火力值归零
2)敌人消失

1个英雄机与所有敌人比

public boolean isGameOver(){
   for(int i=0;i<flyings.length;i++){
      FlyingObject f = flyings[i];
      if(hero.hit(f)){//撞上了
        hero.substractLife();
        hero.clearDoubleFire();
                        交换并缩容
      }
   }
   return hero.getLife()<=0;//英雄机命数<=0,即为游戏结束
}

剩1条命

class Hero{
   //英雄机撞敌人
   public boolean hit(FlyingObject obj){
     this:英雄机
     obj:敌人
   }
}

class FlyingObject{
   //敌人被英雄机撞
   public boolean hitBy(Hero obj){
     this:敌人
     obj:英雄机
   }
}

RGB:三原色，三基色
R:红色
G:绿色
B:蓝色

0xFF0000----纯红
0x00FF00----纯绿
0x0000FF----纯蓝

/** 所有子弹与所有敌人的碰撞 */
public void bangAction(){
  for(int i=0;i<bullets.length;i++){
      Bullet  b = bullets[i];
      bang(b);
  }
}
int score = 0;//得分
/** 1个子弹与所有敌人的碰撞 */
public void bang(Bullet b){
   int index = -1;//存储被撞敌人的下标
   for(int i=0;i<flyings.length;i++){
      FlyingObject  f = flyings[i];
      if(f.shootBy(b)){//撞上了
          index = i;
          break;
      }
   }
   one-----Airplane,BossAirplane,Bee,BigYellowBee
   if(index!=-1){
       FlyingObject one = flyings[index];//获取被撞的敌人
       if(one instanceof Enemy){//是敌人
          Enemy e = (Enemy)one;
          score+=e.getScore();
       }
       if(one instanceof Award){//是奖励
          Award a = (Award)one;
          int type = a.getType();
          switch(type){
          case  Award.DOUBLE_FILE:
            hero.addDoubleFire();
            break;
          case  Award.LIFE:
            hero.addLife();
            break;
          }
       }
       
       FlyingObject t = flyings[index];
       flyings[index] = flyings[flyings.length-1];
       flyings[flyings.length-1] = t;
       flyings = Arrays.copyOf(flyings,flyings.length-1);
   }
}

为什么敌人会在页面上出现？
--------因为敌人在flyings数组中
如何让敌人不出现在页面上？
--------将敌人从flyings数组中删除


class Airplane extends FlyingObject implements Enemy(){
    public int getScore(){
       return 5;
    }
}
class BossAirplane extends FlyingObject implements Enemy(){
    public int getScore(){
       return 20;
    }
}

面向过程
面向对象
面向接口

1)判断是否撞上了
2)若撞上了：
                敌人消失
                可能加分，可能加奖励(加命或加火力值)


/** 子弹与敌人的碰撞 */
public void bangAction(){
   for(int i=0;i<bullets.length;i++){
      Bullet b = bullets[i];
      for(int j=0;j<flyings.length;j++){
          FlyingObject f = flyings[j];
          if(f.shootBy(b)){//撞上了
                                          判断f的类型：
                                                      若为敌人，则玩家加分
                                                      若为奖励，
                                                              判断是加命还是加火力
                                         删除被撞的敌人
          }
      }
   }
}
多个子弹和多个敌人撞

1)判断是否撞上了
2)若撞上了：
                  敌人消失
                  可能加分，可能加奖励(加命或加火力值)
                  
class Bullet{  //子弹
    //子弹射击敌人
    public boolean shoot(FlyingObject  obj){
         this:子弹    
         obj:敌人
    }
}

class FlyingObject{//敌人
   //敌人被子弹射击
   public boolean shootBy(Bullet obj){
      this:敌人
      obj:子弹
   }
}

1)先看功能是否是某个对象的行为
  1.1)若是对象的行为，则写在相应的类中
  1.2)若不是对象的行为，则写在ShootGame中
2)在ShootGame中调用行为


敌人-----消失
英雄机---减命、火力值归零

打的是敌人------玩家得5分
打的是小蜜蜂----英雄机可能得命，也可能得火力
敌人(敌机+小蜜蜂)消失

Shoot射击游戏第三天：
1.子弹和敌人碰撞的实现步骤：
  1)FlyingObject---shootBy(Bullet b)
  2)Hero----addDoubleFire(),addLife()
  3)action(){
      run(){
        ... 
        bangAction();//检查碰撞
        repaint();     
      }
    }
  4)bangAction(){//所有子弹与所有敌人撞
                遍历所有子弹，将子弹传给bang()方法
    }
  5)bang(Bullet b){//1发子弹与所有敌人撞
                    遍历所有敌人，获取每一个敌人f
                    判断f是否与b撞上了
                    若撞上了：
        5.1)得分或得奖励
              5.1.1)得到被撞敌人对象
              5.1.2)判断是敌人还是奖励
                                                                  若是敌人则增分
                                                                  若是奖励则得奖励类型
                                                                       判断不同的奖励类型：
                                                                                   增命或增火力值
        5.2)将被撞对象从flyings中删除
              5.2.1)将被撞敌人与最后一个元素交换(追尾并绕圈)
              5.2.2)缩容---删除最后一个元素(被撞的对象)
  }
2.画分和画命的实现步骤：
  1)hero---getLife()获取命
  2)paint(g){
       ......
       paintScore(g);//画分和命
    }
  3)paintScore(g){
                    设置颜色g.setColor(...)
                    设置字体g.setFont(...)
                    画分g.drawString(...);
     }
3.英雄机与敌人碰撞的实现步骤：
  1)Hero---boolean hit(FlyingObject other);
  2)Hero---substractLife()
           clearDoubleFire()  #setDoubleFire(int doubleFire)
  3)action(){
                      重写run(){
         ...
         checkGameOverAction();//检测英雄机与敌人
         repaint();               
       }
    }
  4)checkGameOverAction(){
     if(isGameOver()){    
     }
  }
  5)isGameOver(){ //检测是否有命
                 遍历所有敌人，获取每一个敌人f
                 判断hero.hit(f){
                         减命
                         火力值清零
                         删除被撞的敌人(交换，缩容)            
      }
      return hero.getLife()<=0
  }
4.画状态的实现步骤：
  1)START,RUNNING,PAUSE,GAME_OVER
    state=START(存储当前状态)
  2)paint(){
       ...
       paintState(g);
     }
  3)paintState(g){
      START状态--贴start图
      PAUSE状态--贴pause图
      GAME_OVER状态--贴gameover图
     }
  4)run(){
     if(state==RUNNING){
                             一堆action();
     }
     repaint();
    }
  5)mouseMoved(){
     if(state==RUNNING){
                         获取x,y,调英雄机移动方法
     }
    }
  6)重写mouseClicked(){
                 若为启动状态，则改为运行状态
                 若为游戏结束状态，则：
                          清理现场(hero,flyings,bullets,score)
                          改为启动状态 
    }
  7)checkGameOverAction(){
      if(isGameOver()){
         state = GAME_OVER;
      } 
    }
  8)重写mouseExited(){
      if(state == RUNNING){
         state = PAUSE;
      }
    }
  9)重写mouseEntered(){
      if(state == PAUSE){
         state = RUNNING;
      } 
    }